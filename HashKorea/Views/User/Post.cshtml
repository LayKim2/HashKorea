@{
    ViewData["Title"] = "Post";
}

@section Styles {
    <style>

        .editor-content[contenteditable=true]:empty:before {
            content: attr(data-placeholder);
            color: #aaa;
            font-style: italic;
        }

        .modern-editor-container {
            max-width: 900px;
            margin: 2rem auto;
            border-radius: 12px;
            background: white;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
            overflow: hidden;
        }

        .editor-toolbar {
            display: flex;
            gap: 1rem;
            padding: 1rem;
            background: #f8f9fa;
            border-bottom: 1px solid #edf0f2;
            flex-wrap: wrap;
        }

        .toolbar-group {
            display: flex;
            gap: 0.5rem;
            padding-right: 1rem;
            border-right: 1px solid #edf0f2;
        }

            .toolbar-group:last-child {
                border-right: none;
            }

        .toolbar-btn {
            width: 40px;
            height: 40px;
            border: none;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #555;
        }

            .toolbar-btn:hover {
                background: #f0f0f0;
                color: #0099ff;
            }

            .toolbar-btn.active {
                background: #e6f4ff;
                color: #0099ff;
            }

        .toolbar-select {
            padding: 0.5rem;
            border: 1px solid #edf0f2;
            border-radius: 8px;
            background: white;
            min-width: 120px;
            font-size: 14px;
            cursor: pointer;
        }

        .editor-content {
            color: inherit;
            min-height: 400px;
            padding: 2rem;
            outline: none;
            font-size: 16px;
            line-height: 1.6;
        }

            .editor-content:focus {
                background: #fafafa;
            }

            .editor-content img {
                max-width: 100%;
                height: auto;
                border-radius: 8px;
            }

            .editor-content p {
                margin: 0 0 1rem 0;
            }

        .editor-header {
            padding: 1.5rem;
            border-bottom: 1px solid #edf0f2;
        }

        .header-group {
            display: flex;
            gap: 1rem;
            flex-direction: column;
        }

        .category-select {
            width: 200px;
            padding: 0.8rem;
            border: 1px solid #edf0f2;
            border-radius: 8px;
            font-size: 14px;
            outline: none;
        }

        .title-input {
            width: 100%;
            padding: 0.8rem;
            border: 1px solid #edf0f2;
            border-radius: 8px;
            font-size: 16px;
            outline: none;
        }

            .title-input:focus, .category-select:focus {
                border-color: #0099ff;
                box-shadow: 0 0 0 3px rgba(0,153,255,0.1);
            }

        .editor-footer {
            padding: 1.5rem;
            border-top: 1px solid #edf0f2;
            display: flex;
            justify-content: flex-end;
        }

        .submit-button {
            padding: 0.8rem 2rem;
            background: #0099ff;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.2s ease;
        }

            .submit-button:hover {
                background: #0088ee;
            }

        .color-btn {
            position: relative;
            overflow: hidden;
        }

        .color-picker {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }

        .toolbar-select {
            min-width: 120px;
        }


        #editor {
            min-height: 300px;
            border: 2px dashed #ccc;
            padding: 10px;
        }

            #editor.drag-over {
                border-color: #007bff;
                background-color: rgba(0, 123, 255, 0.1);
            }

            #editor img {
                max-width: 100%;
                height: auto;
            }
    </style>
}

<input type="hidden" id="hdnReturnUrl" value="@ViewBag.ReturnUrl" />
<input type="hidden" id="hdntype" value="@ViewBag.Type" />

<div class="modern-editor-container">
    <div class="editor-header">
        <div class="header-group">
            <select id="categoryDropdown" class="category-select">
                <option value="">Select a category</option>
            </select>
            <input type="text" class="title-input" placeholder="Enter title">
        </div>
    </div>

    <div class="editor-toolbar">
        <div class="toolbar-group">
            <select class="toolbar-select font-select">
                <option value="Arial">Arial</option>
                <option value="Helvetica">Helvetica</option>
                <option value="Times New Roman">Times New Roman</option>
                <option value="Calibri">Calibri</option>
                <option value="Verdana">Verdana</option>
            </select>

            <select class="toolbar-select font-size-select">
                <option value="3">Normal</option>
                <option value="1">Small</option>
                <option value="5">Large</option>
                <option value="7">Huge</option>
            </select>
        </div>

        <div class="toolbar-group">
            <button class="toolbar-btn color-btn">
                <i class="fas fa-font"></i>
                <input type="color" class="color-picker" />
            </button>
            <button class="toolbar-btn color-btn">
                <i class="fas fa-highlighter"></i>
                <input type="color" class="color-picker" />
            </button>
        </div>

        <div class="toolbar-group">
            <button class="toolbar-btn" data-command="bold"><i class="fas fa-bold"></i></button>
            <button class="toolbar-btn" data-command="italic"><i class="fas fa-italic"></i></button>
            <button class="toolbar-btn" data-command="underline"><i class="fas fa-underline"></i></button>
        </div>

        <div class="toolbar-group">
            <button class="toolbar-btn" data-command="justifyLeft"><i class="fas fa-align-left"></i></button>
            <button class="toolbar-btn" data-command="justifyCenter"><i class="fas fa-align-center"></i></button>
            <button class="toolbar-btn" data-command="justifyRight"><i class="fas fa-align-right"></i></button>
        </div>

        <div class="toolbar-group">
            <select class="toolbar-select format-select">
                <option value="p">Normal Text</option>
                <option value="h1">Heading 1</option>
                <option value="h2">Heading 2</option>
                <option value="h3">Heading 3</option>
            </select>
        </div>

        <div class="toolbar-group">
            <button id="btnInsertImage" class ="toolbar-btn"><i class="fas fa-image"></i></button>
            <input type="file" id="imageInput" style="display: none;" accept="image/*">
            <button class="toolbar-btn" data-command="insertUnorderedList"><i class="fas fa-list-ul"></i></button>
            <button class="toolbar-btn" data-command="insertOrderedList"><i class="fas fa-list-ol"></i></button>
        </div>
    </div>

    <div id="editor" class="editor-content" contenteditable="true" data-placeholder="Enter your content here...">
        @* <p><br></p> *@
    </div>

    <div class="editor-footer">
        <button id="btnPost" class="submit-button">Submit</button>
    </div>
</div>

<script>
    // jQuery ready function
    $(document).ready(function() {

        getCommonCodes($('#hdntype').val(), 'categoryDropdown');

        const $editor = $('#editor');
        const defaultColor = 'black';
        $editor.css('color', defaultColor);

        // Enable styleWithCSS
        document.execCommand('styleWithCSS', false, true);

        // Drag and drop functionality
        $editor.on({
            'dragover': function(e) {
                e.preventDefault();
                $(this).addClass('drag-over');
            },
            'dragleave': function() {
                $(this).removeClass('drag-over');
            },
            'drop': function(e) {
                e.preventDefault();
                $(this).removeClass('drag-over');
                handleFiles(e.originalEvent.dataTransfer.files);
            }
        });

        // Font change event for font family
        $('.font-select').on('change', function() {
            execCommand('fontName', $(this).val());
        });

        // Font size change event
        $('.font-size-select').on('change', function() {
            execCommand('fontSize', $(this).val());
        });

        // Color picker functionality
        $('.color-picker').on('change', function() {
            applyTextColor($(this).val());
        });

        // Command execution for buttons
        $('.toolbar-btn').on('click', function() {
            const command = $(this).data('command');
            execCommand(command);
        });

        function validateForm() {
            let isValid = true;
            const category = $('.category-select').val();
            const title = $('.title-input').val().trim();
            const content = $('#editor').html().trim();

            if (!category) {
                $('.category-select').css('border-color', 'red');
                isValid = false;
            } else {
                $('.category-select').css('border-color', '');
            }

            if (!title) {
                $('.title-input').css('border-color', 'red');
                isValid = false;
            } else {
                $('.title-input').css('border-color', '');
            }

            if (!content) {
                $('#editor').css('border-color', 'red');
                isValid = false;
            } else {
                $('#editor').css('border-color', '');
            }

            return isValid;
        }

        // Submit button functionality
        $('#btnPost').on('click', async function(e) {

            e.preventDefault();

            if (validateForm()) {

                $('#loadingSpinner').show();

                const category = $("#categoryDropdown option:selected").text();
                const categoryCD = $("#categoryDropdown").val();

                const title = $('.title-input').val();
                const content = $('#editor').html().trim();

                const formData = new FormData();
                formData.append('category', category);
                formData.append('categoryCD', categoryCD);
                formData.append('title', title);
                formData.append('content', content);

                const images = $editor.find('img');
                const imagePromises = [];

                images.each(function(index) {
                    const img = $(this);
                    const src = img.attr('src');
                    if (src.startsWith('blob:')) {
                        imagePromises.push(fetch(src)
                            .then(r => r.blob())
                            .then(blob => {
                                const file = new File([blob], `image_${index}.png`, { type: 'image/png' });
                                formData.append('imageFiles', file);
                                img.attr('src', `{{image_${index}}}`);
                            })
                        );
                    }
                });

                await Promise.all(imagePromises);

                formData.set('content', $editor.html());

                try {

                    const response = await $.ajax({
                        url: '/api/user/post',
                        method: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false
                    });

                    blobUrls.forEach(URL.revokeObjectURL);
                    blobUrls = [];

                    const returnUrl = $('#hdnReturnUrl').val() || '/';

                    window.location.href = returnUrl;

                } catch (error) {
                    console.error('Failed to save content:', error);
                }
                finally {
                    $('#loadingSpinner').hide();
                }
            }

        });
    });

    // Function to apply text color
    function applyTextColor(color) {
        document.execCommand('foreColor', false, color);
    }

    // Function to execute commands
    function execCommand(command, value = null) {
        document.execCommand(command, false, value);
    }

    $('#btnInsertImage').click(function() {
        $('#imageInput').click();
    });

    $('#imageInput').change(function() {
        handleFiles(this.files);
    });

    // Function to handle file uploads
    let blobUrls = [];

    function handleFiles(files) {

        $.each(files, function(i, file) {
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    const blob = new Blob([event.target.result], { type: file.type });
                    const url = URL.createObjectURL(blob);

                    blobUrls.push(url);

                    const img = new Image();
                    img.onload = function() {
                        insertImageAtCursor(this);
                    };
                    img.src = url;
                };
                reader.readAsArrayBuffer(file);
            }
        });
    }

    // Function to insert image at cursor position
    function insertImageAtCursor(img) {
        const $editor = $('#editor');
        $editor.focus();

        const selection = window.getSelection();
        const range = document.createRange();

        if (selection.rangeCount > 0 && $editor[0].contains(selection.anchorNode)) {
            range.setStart(selection.anchorNode, selection.anchorOffset);
        } else {
            const lastChild = $editor[0].lastChild;
            if (lastChild) {
                if (lastChild.nodeType === Node.TEXT_NODE) {
                    range.setStart(lastChild, lastChild.length);
                } else {
                    range.setStartAfter(lastChild);
                }
            } else {
                range.setStart($editor[0], 0);
            }
        }

        range.insertNode(img);
        range.collapse(false);

        selection.removeAllRanges();
        selection.addRange(range);

        $editor[0].dispatchEvent(new Event('input', { bubbles: true }));

        $editor.html($editor.html());

        $editor.focus();
    }

</script>

