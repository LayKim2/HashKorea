@{
    ViewData["Title"] = "Post";
}


@section Styles {
    <link rel="stylesheet" href="~/css/User/Post.css" />
}

<input type="hidden" id="hdnReturnUrl" value="@ViewBag.ReturnUrl" />
<input type="hidden" id="hdntype" value="@ViewBag.Type" />

<div class="modern-editor-container">
    <div class="editor-header">
        <div class="header-group">
            <select id="categoryDropdown" class="category-select">
                <option value="">Select a category</option>
            </select>
            <input type="text" class="title-input" placeholder="Enter title">
        </div>
    </div>

    <div class="editor-toolbar">
        <div class="toolbar-group">
            <select class="toolbar-select font-select">
                <option value="Arial">Arial</option>
                <option value="Helvetica">Helvetica</option>
                <option value="Times New Roman">Times New Roman</option>
                <option value="Calibri">Calibri</option>
                <option value="Verdana">Verdana</option>
            </select>

            <select class="toolbar-select font-size-select">
                <option value="3">Normal</option>
                <option value="1">Small</option>
                <option value="5">Large</option>
                <option value="7">Huge</option>
            </select>
        </div>

        <div class="toolbar-group">
            <button class="toolbar-btn color-btn">
                <i class="fas fa-font"></i>
                <input type="color" class="color-picker" />
            </button>
            <button class="toolbar-btn color-btn">
                <i class="fas fa-highlighter"></i>
                <input type="color" class="color-picker" />
            </button>
        </div>

        <div class="toolbar-group">
            <button class="toolbar-btn" data-command="bold"><i class="fas fa-bold"></i></button>
            <button class="toolbar-btn" data-command="italic"><i class="fas fa-italic"></i></button>
            <button class="toolbar-btn" data-command="underline"><i class="fas fa-underline"></i></button>
        </div>

        <div class="toolbar-group">
            <button class="toolbar-btn" data-command="justifyLeft"><i class="fas fa-align-left"></i></button>
            <button class="toolbar-btn" data-command="justifyCenter"><i class="fas fa-align-center"></i></button>
            <button class="toolbar-btn" data-command="justifyRight"><i class="fas fa-align-right"></i></button>
        </div>

        <div class="toolbar-group">
            <select class="toolbar-select format-select">
                <option value="p">Normal Text</option>
                <option value="h1">Heading 1</option>
                <option value="h2">Heading 2</option>
                <option value="h3">Heading 3</option>
            </select>
        </div>

        <div class="toolbar-group">
            <button id="btnInsertImage" class ="toolbar-btn"><i class="fas fa-image"></i></button>
            <input type="file" id="imageInput" style="display: none;" accept="image/*">
            <button class="toolbar-btn" data-command="insertUnorderedList"><i class="fas fa-list-ul"></i></button>
            <button class="toolbar-btn" data-command="insertOrderedList"><i class="fas fa-list-ol"></i></button>
        </div>
    </div>

    <div id="editor" class="editor-content" contenteditable="true" data-placeholder="Enter your content here...">
        @* <p><br></p> *@
    </div>

    <div class="editor-footer">
        <button id="btnPost" class="submit-button">Submit</button>
    </div>
</div>

<script>
    // jQuery ready function
    $(document).ready(function() {

        getCommonCodes($('#hdntype').val(), 'categoryDropdown');

        const $editor = $('#editor');
        const defaultColor = 'black';
        $editor.css('color', defaultColor);

        // Enable styleWithCSS
        document.execCommand('styleWithCSS', false, true);

        // Drag and drop functionality
        $editor.on({
            'dragover': function(e) {
                e.preventDefault();
                $(this).addClass('drag-over');
            },
            'dragleave': function() {
                $(this).removeClass('drag-over');
            },
            'drop': function(e) {
                e.preventDefault();
                $(this).removeClass('drag-over');
                handleFiles(e.originalEvent.dataTransfer.files);
            }
        });

        // Font change event for font family
        $('.font-select').on('change', function() {
            execCommand('fontName', $(this).val());
        });

        // Font size change event
        $('.font-size-select').on('change', function() {
            execCommand('fontSize', $(this).val());
        });

        // Color picker functionality
        $('.color-picker').on('change', function() {
            applyTextColor($(this).val());
        });

        // Command execution for buttons
        $('.toolbar-btn').on('click', function() {
            const command = $(this).data('command');
            execCommand(command);
        });

        function validateForm() {
            let isValid = true;
            const category = $('.category-select').val();
            const title = $('.title-input').val().trim();
            const content = $('#editor').html().trim();

            if (!category) {
                $('.category-select').css('border-color', 'red');
                isValid = false;
            } else {
                $('.category-select').css('border-color', '');
            }

            if (!title) {
                $('.title-input').css('border-color', 'red');
                isValid = false;
            } else {
                $('.title-input').css('border-color', '');
            }

            if (!content) {
                $('#editor').css('border-color', 'red');
                isValid = false;
            } else {
                $('#editor').css('border-color', '');
            }

            return isValid;
        }

        // Submit button functionality
        $('#btnPost').on('click', async function(e) {

            e.preventDefault();

            if (validateForm()) {

                $('#loadingSpinner').show();

                const category = $("#categoryDropdown option:selected").text();
                const categoryCD = $("#categoryDropdown").val();

                const title = $('.title-input').val();
                const content = $('#editor').html().trim();

                const formData = new FormData();
                formData.append('type', $('#hdntype').val());
                formData.append('category', category);
                formData.append('categoryCD', categoryCD);
                formData.append('title', title);
                formData.append('content', content);

                const images = $editor.find('img');
                const imagePromises = [];

                images.each(function(index) {
                    const img = $(this);
                    const src = img.attr('src');
                    if (src.startsWith('blob:')) {
                        imagePromises.push(fetch(src)
                            .then(r => r.blob())
                            .then(blob => {
                                const file = new File([blob], `image_${index}.png`, { type: 'image/png' });
                                formData.append('imageFiles', file);
                                img.attr('src', `{{image_${index}}}`);
                            })
                        );
                    }
                });

                await Promise.all(imagePromises);

                formData.set('content', $editor.html());

                try {

                    const response = await $.ajax({
                        url: '/api/user/post',
                        method: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false
                    });

                    blobUrls.forEach(URL.revokeObjectURL);
                    blobUrls = [];

                    const returnUrl = $('#hdnReturnUrl').val() || '/';

                    window.location.href = returnUrl;

                } catch (error) {
                    console.error('Failed to save content:', error);
                }
                finally {
                    $('#loadingSpinner').hide();
                }
            }

        });
    });

    // Function to apply text color
    function applyTextColor(color) {
        document.execCommand('foreColor', false, color);
    }

    // Function to execute commands
    function execCommand(command, value = null) {
        document.execCommand(command, false, value);
    }

    $('#btnInsertImage').click(function() {
        $('#imageInput').click();
    });

    $('#imageInput').change(function() {
        handleFiles(this.files);
    });


</script>

